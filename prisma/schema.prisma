generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  profile   Profile?
  accounts  Account[]
  sessions  Session[]

  // social graph
  likesFrom Like[]   @relation("likes_from")
  likesTo   Like[]   @relation("likes_to")
  matchesA  Match[]  @relation("matches_a")
  matchesB  Match[]  @relation("matches_b")
  messages  Message[]
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  displayName     String
  city            String?
  latitude        Float?
  longitude       Float?
  dob             DateTime?
  pronouns        String?
  genderIdentity  String[]
  orientation     String[]
  showTo          String[]
  intent          String?
  bio             String?
  platforms       String[]
  genres          String[]
  topGames        String[]
  playTimes       String[]
  voicePref       String?

  // back-relations to Media and PromptAnswer (these are what Prisma was asking for)
  photos   Media[]
  prompts  PromptAnswer[]

  user User @relation(fields: [userId], references: [id])
}

model Media {
  id        String   @id @default(cuid())
  userId    String
  type      String
  url       String
  sort      Int      @default(0)
  createdAt DateTime @default(now())

  // Link to Profile (NOT User) via Profile.userId (which is unique)
  profile Profile @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model PromptAnswer {
  id        String  @id @default(cuid())
  userId    String
  promptKey String
  answer    String

  // Link to Profile (NOT User) via Profile.userId
  profile Profile @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model Like {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  createdAt  DateTime @default(now())

  fromUser User @relation("likes_from", fields: [fromUserId], references: [id])
  toUser   User @relation("likes_to",   fields: [toUserId],   references: [id])

  @@index([fromUserId])
  @@index([toUserId])
}

model Match {
  id        String   @id @default(cuid())
  userAId   String
  userBId   String
  createdAt DateTime @default(now())

  userA User @relation("matches_a", fields: [userAId], references: [id])
  userB User @relation("matches_b", fields: [userBId], references: [id])

  messages Message[]

  @@index([userAId])
  @@index([userBId])
}

model Message {
  id         String   @id @default(cuid())
  matchId    String
  fromUserId String
  body       String
  createdAt  DateTime @default(now())

  match    Match @relation(fields: [matchId], references: [id])
  fromUser User  @relation(fields: [fromUserId], references: [id])

  @@index([matchId])
  @@index([fromUserId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
